{"id":"node_modules/readline2/index.js","dependencies":[{"name":"D:\\personal\\Node-build-blockchain\\package.json","includedInParent":true,"mtime":1620869816151},{"name":"D:\\personal\\Node-build-blockchain\\node_modules\\readline2\\package.json","includedInParent":true,"mtime":1617939560648},{"name":"readline","loc":{"line":7,"column":23},"parent":"D:\\personal\\Node-build-blockchain\\node_modules\\readline2\\index.js","resolved":"D:\\personal\\Node-build-blockchain\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"mute-stream","loc":{"line":8,"column":25},"parent":"D:\\personal\\Node-build-blockchain\\node_modules\\readline2\\index.js","resolved":"D:\\personal\\Node-build-blockchain\\node_modules\\mute-stream\\mute.js"},{"name":"code-point-at","loc":{"line":9,"column":26},"parent":"D:\\personal\\Node-build-blockchain\\node_modules\\readline2\\index.js","resolved":"D:\\personal\\Node-build-blockchain\\node_modules\\code-point-at\\index.js"},{"name":"is-fullwidth-code-point","loc":{"line":10,"column":35},"parent":"D:\\personal\\Node-build-blockchain\\node_modules\\readline2\\index.js","resolved":"D:\\personal\\Node-build-blockchain\\node_modules\\is-fullwidth-code-point\\index.js"},{"name":"process","parent":"D:\\personal\\Node-build-blockchain\\node_modules\\readline2\\index.js","resolved":"D:\\personal\\Node-build-blockchain\\node_modules\\process\\browser.js"}],"generated":{"js":"var process = require(\"process\");\n/**\n * Readline API fa√ßade to fix some issues\n * @Note: May look a bit like Monkey patching... if you know a better way let me know.\n */\n\n\"use strict\";\nvar readline = require(\"readline\");\nvar MuteStream = require(\"mute-stream\");\nvar codePointAt = require(\"code-point-at\");\nvar isFullwidthCodePoint = require(\"is-fullwidth-code-point\");\n\nvar Interface = module.exports = {};\n\n\n/**\n * Create a readline interface\n * @param  {Object} opt Readline option hash\n * @return {readline}   the new readline interface\n */\n\nInterface.createInterface = function( opt ) {\n  opt || (opt = {});\n  var filteredOpt = opt;\n\n  // Default `input` to stdin\n  filteredOpt.input = opt.input || process.stdin;\n\n  // Add mute capabilities to the output\n  var ms = new MuteStream();\n  ms.pipe( opt.output || process.stdout );\n  filteredOpt.output = ms;\n\n  // Create the readline\n  var rl = readline.createInterface( filteredOpt );\n\n  // Fix bug with refreshLine\n  var _refreshLine = rl._refreshLine;\n  rl._refreshLine = function() {\n    _refreshLine.call(rl);\n\n    var line = this._prompt + this.line;\n    var cursorPos = this._getCursorPos();\n\n    readline.moveCursor(this.output, -line.length, 0);\n    readline.moveCursor(this.output, cursorPos.cols, 0);\n  };\n\n  // Returns current cursor's position and line\n  rl._getCursorPos = function() {\n    var columns = this.columns;\n    var strBeforeCursor = this._prompt + this.line.substring(0, this.cursor);\n    var dispPos = this._getDisplayPos(strBeforeCursor);\n    var cols = dispPos.cols;\n    var rows = dispPos.rows;\n    // If the cursor is on a full-width character which steps over the line,\n    // move the cursor to the beginning of the next line.\n    if (cols + 1 === columns &&\n        this.cursor < this.line.length &&\n        isFullwidthCodePoint(codePointAt(this.line, this.cursor))) {\n      rows++;\n      cols = 0;\n    }\n    return {cols: cols, rows: rows};\n  };\n\n  // Returns the last character's display position of the given string\n  rl._getDisplayPos = function(str) {\n    var offset = 0;\n    var col = this.columns;\n    var row = 0;\n    var code;\n    str = stripVTControlCharacters(str);\n    for (var i = 0, len = str.length; i < len; i++) {\n      code = codePointAt(str, i);\n      if (code >= 0x10000) { // surrogates\n        i++;\n      }\n      if (code === 0x0a) { // new line \\n\n        offset = 0;\n        row += 1;\n        continue;\n      }\n      if (isFullwidthCodePoint(code)) {\n        if ((offset + 1) % col === 0) {\n          offset++;\n        }\n        offset += 2;\n      } else {\n        offset++;\n      }\n    }\n    var cols = offset % col;\n    var rows = row + (offset - cols) / col;\n    return {cols: cols, rows: rows};\n  };\n\n  // Prevent arrows from breaking the question line\n  var origWrite = rl._ttyWrite;\n  rl._ttyWrite = function( s, key ) {\n    key || (key = {});\n\n    if ( key.name === \"up\" ) return;\n    if ( key.name === \"down\" ) return;\n\n    origWrite.apply( this, arguments );\n  };\n\n  return rl;\n};\n\n// Regexes used for ansi escape code splitting\nvar metaKeyCodeReAnywhere = /(?:\\x1b)([a-zA-Z0-9])/;\nvar functionKeyCodeReAnywhere = new RegExp('(?:\\x1b+)(O|N|\\\\[|\\\\[\\\\[)(?:' + [\n  '(\\\\d+)(?:;(\\\\d+))?([~^$])',\n  '(?:M([@ #!a`])(.)(.))', // mouse\n  '(?:1;)?(\\\\d+)?([a-zA-Z])'\n].join('|') + ')');\n\n/**\n * Tries to remove all VT control characters. Use to estimate displayed\n * string width. May be buggy due to not running a real state machine\n */\nfunction stripVTControlCharacters (str) {\n  str = str.replace(new RegExp(functionKeyCodeReAnywhere.source, 'g'), '');\n  return str.replace(new RegExp(metaKeyCodeReAnywhere.source, 'g'), '');\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/readline2/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/readline2/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}}],"sources":{"node_modules/readline2/index.js":"/**\n * Readline API fa√ßade to fix some issues\n * @Note: May look a bit like Monkey patching... if you know a better way let me know.\n */\n\n\"use strict\";\nvar readline = require(\"readline\");\nvar MuteStream = require(\"mute-stream\");\nvar codePointAt = require(\"code-point-at\");\nvar isFullwidthCodePoint = require(\"is-fullwidth-code-point\");\n\nvar Interface = module.exports = {};\n\n\n/**\n * Create a readline interface\n * @param  {Object} opt Readline option hash\n * @return {readline}   the new readline interface\n */\n\nInterface.createInterface = function( opt ) {\n  opt || (opt = {});\n  var filteredOpt = opt;\n\n  // Default `input` to stdin\n  filteredOpt.input = opt.input || process.stdin;\n\n  // Add mute capabilities to the output\n  var ms = new MuteStream();\n  ms.pipe( opt.output || process.stdout );\n  filteredOpt.output = ms;\n\n  // Create the readline\n  var rl = readline.createInterface( filteredOpt );\n\n  // Fix bug with refreshLine\n  var _refreshLine = rl._refreshLine;\n  rl._refreshLine = function() {\n    _refreshLine.call(rl);\n\n    var line = this._prompt + this.line;\n    var cursorPos = this._getCursorPos();\n\n    readline.moveCursor(this.output, -line.length, 0);\n    readline.moveCursor(this.output, cursorPos.cols, 0);\n  };\n\n  // Returns current cursor's position and line\n  rl._getCursorPos = function() {\n    var columns = this.columns;\n    var strBeforeCursor = this._prompt + this.line.substring(0, this.cursor);\n    var dispPos = this._getDisplayPos(strBeforeCursor);\n    var cols = dispPos.cols;\n    var rows = dispPos.rows;\n    // If the cursor is on a full-width character which steps over the line,\n    // move the cursor to the beginning of the next line.\n    if (cols + 1 === columns &&\n        this.cursor < this.line.length &&\n        isFullwidthCodePoint(codePointAt(this.line, this.cursor))) {\n      rows++;\n      cols = 0;\n    }\n    return {cols: cols, rows: rows};\n  };\n\n  // Returns the last character's display position of the given string\n  rl._getDisplayPos = function(str) {\n    var offset = 0;\n    var col = this.columns;\n    var row = 0;\n    var code;\n    str = stripVTControlCharacters(str);\n    for (var i = 0, len = str.length; i < len; i++) {\n      code = codePointAt(str, i);\n      if (code >= 0x10000) { // surrogates\n        i++;\n      }\n      if (code === 0x0a) { // new line \\n\n        offset = 0;\n        row += 1;\n        continue;\n      }\n      if (isFullwidthCodePoint(code)) {\n        if ((offset + 1) % col === 0) {\n          offset++;\n        }\n        offset += 2;\n      } else {\n        offset++;\n      }\n    }\n    var cols = offset % col;\n    var rows = row + (offset - cols) / col;\n    return {cols: cols, rows: rows};\n  };\n\n  // Prevent arrows from breaking the question line\n  var origWrite = rl._ttyWrite;\n  rl._ttyWrite = function( s, key ) {\n    key || (key = {});\n\n    if ( key.name === \"up\" ) return;\n    if ( key.name === \"down\" ) return;\n\n    origWrite.apply( this, arguments );\n  };\n\n  return rl;\n};\n\n// Regexes used for ansi escape code splitting\nvar metaKeyCodeReAnywhere = /(?:\\x1b)([a-zA-Z0-9])/;\nvar functionKeyCodeReAnywhere = new RegExp('(?:\\x1b+)(O|N|\\\\[|\\\\[\\\\[)(?:' + [\n  '(\\\\d+)(?:;(\\\\d+))?([~^$])',\n  '(?:M([@ #!a`])(.)(.))', // mouse\n  '(?:1;)?(\\\\d+)?([a-zA-Z])'\n].join('|') + ')');\n\n/**\n * Tries to remove all VT control characters. Use to estimate displayed\n * string width. May be buggy due to not running a real state machine\n */\nfunction stripVTControlCharacters (str) {\n  str = str.replace(new RegExp(functionKeyCodeReAnywhere.source, 'g'), '');\n  return str.replace(new RegExp(metaKeyCodeReAnywhere.source, 'g'), '');\n}\n"},"lineCount":128}},"error":null,"hash":"300eae768369670975f76859c9ed588e","cacheData":{"env":{}}}